I"ÿ<h3 id="description">Description</h3>
<p>The RFLIB library makes sending and receiving radio messages easier. Sending and receiving messages through a JemRF radio is easily achieved by reading and writing to the serial port (see this example) but this library has some more advanced features that you may need:</p>

<ul>
  <li>
    <p><strong>Multiprocessing</strong> on an Arduino is inherently difficult due to its single processor. Therefore monitoring the serial port for incoming messages as well as carrying out other tasks (e.g. switch a light on/off) can become difficult. This library implements a non-blocking, also sometimes called ‚Äúround-robin‚Äù, technique to ensure you never miss an in-coming radio message and can also do other processing.</p>
  </li>
  <li>
    <p><strong>Messaging Receipt Reliability</strong> or also sometimes called ‚Äúrequest-reply‚Äù messaging will retransmit messages not received by the intended recipient, and timeout after some predefined amount of retry attempts. This is useful for time when you want to ensure your messages are being received and take some action if they are not received.</p>
  </li>
  <li>
    <p><strong>Serial Port Abstraction</strong> hides the technicality of opening closing, reading and writing to the serial port. This library has a simple transmit method you can use to transmit radio messages and a callback function that is called when a message is received.</p>
  </li>
  <li>
    <p><strong>Call back function for messages received</strong> The library automatically monitors the serial port for messages and calls a call-back function in your code whenever a message is received.</p>
  </li>
  <li>
    <p><strong>Debug</strong> your code using the debug feature that will output debug information to the serial monitor.</p>
  </li>
</ul>

<h3 id="installation">Installation</h3>

<ul>
  <li>Download the library from here:</li>
</ul>

<p><a href="https://github.com/JemRF/rflib.git">https://github.com/JemRF/rflib.git</a></p>
:ET